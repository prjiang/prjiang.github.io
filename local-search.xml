<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Neural Network optimization</title>
    <link href="/2021/08/18/Note/Neural%20Network%20optimization/"/>
    <url>/2021/08/18/Note/Neural%20Network%20optimization/</url>
    
    <content type="html"><![CDATA[<h2 id="對資料進行最佳化"><a href="#對資料進行最佳化" class="headerlink" title="對資料進行最佳化"></a>對資料進行最佳化</h2><p>加快模型收斂速度，使神經網路的訓練更快。</p><h3 id="Data-normalization"><a href="#Data-normalization" class="headerlink" title="Data normalization"></a>Data normalization</h3><p>Data normalization 加快神經網路的訓練。</p><ul><li>normalization = (data - mean) / std</li><li>data -&gt; mean = 0, var = 1</li><li>data 經過 sigmoid、tanh 等啟動函數後，得到的導數較大</li><li>導數愈大，調整幅度大，愈快逼近目標；導數愈小，調整幅度愈小</li></ul><p>Data normalization :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dataset</span></span><br><span class="line">transforms = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))     <span class="comment"># transforms.Normalize((mean), (std))</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>計算 mean、std :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=<span class="built_in">len</span>(train_dataset))</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">next</span>(<span class="built_in">iter</span>(loader))</span><br><span class="line">data_mean = data[<span class="number">0</span>].mean()      <span class="comment"># tensor(0.1307)</span></span><br><span class="line">data_std = data[<span class="number">0</span>].std()        <span class="comment"># tensor(0.3081)</span></span><br><span class="line">data_mean, data_std</span><br></pre></td></tr></table></figure><h3 id="Data-augmentation"><a href="#Data-augmentation" class="headerlink" title="Data augmentation"></a>Data augmentation</h3><p>增加資料的多樣性，使資料分布更均勻。</p><ul><li>PyTorch 中有預設</li><li>常用 Augementor、imgaug 等套件</li></ul><br><h2 id="對超參數的最佳化"><a href="#對超參數的最佳化" class="headerlink" title="對超參數的最佳化"></a>對超參數的最佳化</h2><table><thead><tr><th align="left">Hyperparameters</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">batch_size (批次)</td><td align="left">影響梯度值 (收斂速度)</td></tr><tr><td align="left">epoch (輪數)</td><td align="left">使準確率上升</td></tr><tr><td align="left">learning rate</td><td align="left">影響收斂速度 (梯度下降的步長)</td></tr><tr><td align="left">torch.optim.lr_scheduler (動態學習率)</td><td align="left">隨著輪數改變學習率</td></tr></tbody></table><ul><li>batch_size 愈大，隨機梯度值會愈平均，使收斂速度愈快。若批次過大，GPU 的記憶體不夠大，會造成執行錯誤。</li><li>epoch 增加，準確率停止增加，表示收斂結束，epoch 需停止。</li><li>lr 過大，會無法收斂至最小值 (跳過最小值的點)；lr 過小，造成無法收斂 (梯度下降緩慢)。</li><li>動態lr 固定輪數調整lr。梯度下降快，lr 大；梯度平緩，lr 小。</li></ul><p><code>torch.optim.lr_scheduler.StepLR(optimizer, step_size, gamma)</code></p><ul><li><code>optimizer:</code> 模型的優化器</li><li><code>step_size:</code> 每隔幾個 epoch 更新一次</li><li><code>gamma:</code> 每次更新乘上該值，預設0.1</li></ul><br><h2 id="最佳化方法的最佳化"><a href="#最佳化方法的最佳化" class="headerlink" title="最佳化方法的最佳化"></a>最佳化方法的最佳化</h2><p>模型準確率沒有提高、收斂速度過慢，可以嘗試更換最佳化方法，以提升準確率、加快收斂速度。</p><p>PyTorch 中可以直接選取 :</p><ul><li>SGD</li><li>Adagrad</li><li>RMSProp</li><li>Adam = RMSProp + Momentum</li></ul><p><code>Reference:</code> <a href="https://github.com/prjiang/AI-Seminar/blob/main/2021-03-15/report/Optimization%20for%20Deep%20Learning.pdf">Optimization for Deep Learning</a></p><br><h2 id="損失函數的最佳化"><a href="#損失函數的最佳化" class="headerlink" title="損失函數的最佳化"></a>損失函數的最佳化</h2><h3 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h3><ul><li>MSE (mean square error)</li><li>Binary Cross Entropy</li><li>Cross Entropy</li></ul><h3 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h3><p><a href="https://medium.com/chung-yi/ml%E5%85%A5%E9%96%80-%E5%8D%81%E4%BA%94-regularization-solving-overfitting-9d000e3dd561">Regularization</a> 對 loss function 進行正規化，以解決 overfitting 的情形。</p><ul><li>L1 regularization : <a href="https://ithelp.ithome.com.tw/articles/10227654">Lasso Regression</a></li><li>L2 regularization : <a href="https://medium.com/chung-yi/ml%E5%85%A5%E9%96%80-%E4%BA%8C%E5%8D%81%E4%BA%8C-ridge-regression-f638e1887a7e">Ridge Regression</a></li><li><code>compare:</code> <a href="https://dotblogs.com.tw/dash_analysis/2017/11/03/161734">[Machine Learning]Lasso Regression &amp; Ridge Regression</a></li></ul><br><h2 id="模型本身的最佳化"><a href="#模型本身的最佳化" class="headerlink" title="模型本身的最佳化"></a>模型本身的最佳化</h2><ul><li>Dropout : 拿掉一些神經元 (避免 overfitting)</li><li>batch normalization : layers 的正規化 (解決梯度消失問題)<ul><li><code>Reference:</code> <a href="https://medium.com/ching-i/batch-normalization-%E4%BB%8B%E7%B4%B9-135a24928f12">Batch Normalization 介紹</a></li></ul></li><li>pre-trained model (transfer learning) : 預訓練<ul><li>預訓練模型 : 使用別人設計的神經網路</li><li>預訓練參數 : 載入別人訓練一段時間的參數</li></ul></li></ul><br><h2 id="善用硬體加速"><a href="#善用硬體加速" class="headerlink" title="善用硬體加速"></a>善用硬體加速</h2><ul><li>使用單一主機的多個GPU <code>torch.nn.DataParallel(model)</code><ul><li>使用多GPU 不一定能省記憶體，記憶體會複製至多個GPU上</li><li>使用多GPU 不一定能增加模型準確度，但可以加快訓練速度</li></ul></li><li>使用 Mixed Precision (混合精度)<ul><li>PyTorch 預設使用 fp32 (佔用較多記憶體)</li><li>PyTorch v1.6 支援amp (Auto Mixed Precision) : 部分參數使用 fp32，部分參數使用 fp16<ul><li>可以<b>節省GPU 的記憶體</b>，且加快神經網路執行速度</li></ul></li><li>影響模型準確率 (影響不大)</li></ul></li></ul><p>amp 使用方法 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 優化scaler</span></span><br><span class="line">scaler = torch.cuda.amp.GradScaler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入訓練過程中</span></span><br><span class="line"><span class="keyword">with</span> torch.cuda.amp.autocast():</span><br><span class="line">    output = model(data)</span><br><span class="line">    loss = criterion(output, target)</span><br><span class="line">scaler.scale(loss).backward()       <span class="comment"># 針對scaler 做反向傳遞</span></span><br><span class="line">scaler.step(optimizer)              <span class="comment"># 針對optimizer scaler 做梯度下降 </span></span><br><span class="line">scaler.update()                     <span class="comment"># 更新權重</span></span><br></pre></td></tr></table></figure><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://aigo.org.tw/zh-tw/onlinecourse/535">AIGO - 課程名稱：神經網路優化技巧：讓你的模型又快速又準確</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Neural Network optimization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raspberry Pi Samba Server</title>
    <link href="/2021/08/01/Raspberry%20Pi/RaspberryPi-SambaServer/"/>
    <url>/2021/08/01/Raspberry%20Pi/RaspberryPi-SambaServer/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-Samba"><a href="#Install-Samba" class="headerlink" title="Install Samba"></a>Install Samba</h2><p>選擇 yes，安裝額外套件將 DHCP 取得的 WINS 設定寫入 smb.conf。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo apt-get insatll samba</span><br></pre></td></tr></table></figure><br><h2 id="Setting-Samba"><a href="#Setting-Samba" class="headerlink" title="Setting Samba"></a>Setting Samba</h2><p>加入 SambaServer 並設定密碼。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo pdbedit -a -u pi</span><br></pre></td></tr></table></figure><p>編輯 SambaServer 的設定檔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>在設定檔最後加入以下設定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Pi]</span><br><span class="line">comment = Pi&#x27;s home</span><br><span class="line">path = /home/pi</span><br><span class="line">read only = no</span><br><span class="line">guest ok = no</span><br><span class="line">browseable = yes</span><br><span class="line">create mask = 0644</span><br><span class="line">directory mask = 0755</span><br></pre></td></tr></table></figure><p>存檔後，重啟Samba。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo service smbd restart</span><br></pre></td></tr></table></figure><br><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>於檔案總管的網址列輸入以下指令，即可透過網路芳鄰讀取或寫入 Raspberry Pi 中的目錄與檔案。</p><table><thead><tr><th>System</th><th>Command</th></tr></thead><tbody><tr><td>Windows</td><td>\\IP</td></tr><tr><td>Linux</td><td>smb://IP/目錄名稱</td></tr><tr><td>Mac OS</td><td>smb://IP/目錄名稱</td></tr></tbody></table><p><code>Reference:</code></p><ul><li><a href="http://blog.s2u4o.com/education/self-study/software-settings/raspbiansamba/">RASPBERRY PI 安裝 SAMBA 網路芳鄰伺服器共享 WINDOWS 及 LINUX 檔案</a></li><li><a href="https://blog.gtwang.org/iot/raspberry-pi/raspberry-pi-samba-setup-tutorial/">樹莓派 Raspberry Pi 設定 Samba 網路芳鄰分享檔案教學</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Raspberry Pi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Samba Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install Raspberry Pi OS</title>
    <link href="/2021/07/30/Raspberry%20Pi/RaspberryPi-OS/"/>
    <url>/2021/07/30/Raspberry%20Pi/RaspberryPi-OS/</url>
    
    <content type="html"><![CDATA[<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><h3 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h3><p>下載 <a href="https://www.raspberrypi.org/downloads/">Raspberry Pi Imager</a> <b>(建議)</b> 或 <a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">Raspberry Pi OS (previously called Raspbian)</a>，下載官方版較不會出現不相容問題。</p><p>將作業系統安裝至micro SD卡。(建議先將SD卡格式化)</p><br><p>新增空的ssh檔案(無副檔名) 及 製作 WiFi 設定檔。</p><p>建議可以對電腦熱點進行連線，方便查找 Raspberry Pi 的 IP 。將 ssh 及 wpa_supplicant.conf 設定好放置 boot。</p><p>完成後，將SD卡插入 Raspberry Pi 。</p><p><code>Reference:</code> <a href="https://home.gamer.com.tw/creationDetail.php?sn=3908401">樹莓派 Raspberry Pi，無頭式(無螢幕、鍵盤與滑鼠)，安裝到進入作業系統桌面~完整教學</a></p><br><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><h3 id="SSH-登入"><a href="#SSH-登入" class="headerlink" title="SSH 登入"></a>SSH 登入</h3><h4 id="抓取Raspberry-Pi-的-IP"><a href="#抓取Raspberry-Pi-的-IP" class="headerlink" title="抓取Raspberry Pi 的 IP"></a>抓取Raspberry Pi 的 IP</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>將 Raspberry Pi 開啟，進入 WiFi 路由器的設定頁面，<b>抓取 Raspberry Pi 的 IP</b>。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>電腦開啟熱點，提供 Raspberry Pi 連線。</p><p>連線後即可從電腦的<b>熱點設定頁面</b>查看 Raspberry Pi 的 IP。</p><br><h4 id="登入-SSH"><a href="#登入-SSH" class="headerlink" title="登入 SSH"></a>登入 SSH</h4><p>找出IP後，開啟 Windows PowerShell (系統管理員)，並登入ssh。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; ssh pi@Raspberry Pi 的IP</span><br></pre></td></tr></table></figure><p>預設帳號為: <b>pi</b></p><p>預設密碼為: <b>raspberry</b></p><br><h3 id="啟用-VNC-服務"><a href="#啟用-VNC-服務" class="headerlink" title="啟用 VNC 服務"></a>啟用 VNC 服務</h3><p>成功登入ssh後，下載 <a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>。</p><p>開啟 VNC 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo raspi-config</span><br></pre></td></tr></table></figure><p><code>Interfacing Options -&gt; VNC -&gt; Yes</code></p><p>重啟後，開啟 VNC Viewer 會出現錯誤!</p><br><h3 id="錯誤解決"><a href="#錯誤解決" class="headerlink" title="錯誤解決"></a>錯誤解決</h3><p>更改解析度即可解決，<b>不要選default</b>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo raspi-config</span><br></pre></td></tr></table></figure><p><code>Advanced Options----Resolution----DMT85 (不要選default)</code></p><br><p>完成後，重新啟動。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo reboot</span><br></pre></td></tr></table></figure><br><p>VNC 登入後，即可見到 Raspberry Pi 系統。</p><p><code>Reference:</code> <a href="https://www.twblogs.net/a/5d4b3b75bd9eee5327fc11e1">樹莓派 raspberry 4B系統 VNC View 連接 Cannot currently show the desktop 錯誤解決</a></p><br><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="備份-SD-卡"><a href="#備份-SD-卡" class="headerlink" title="備份 SD 卡"></a>備份 SD 卡</h3><p>下載<a href="https://sourceforge.net/projects/win32diskimager/">Win32 Disk Imager</a>。</p><p><b>裝置</b>選擇 Micro SD 卡位置，<b>映像檔</b>為存放位置，副檔名為img!</p><p>點選<b>讀取</b></p><p>讀取成功後，即可退出 Micro SD 卡。</p><p><code>Reference:</code> <a href="https://oranwind.org/-raspberry-pi-win32-disk-imager-bei-fen-sd-qia-jiao-xue/">Raspberry Pi Win32 Disk Imager 備份 SD 卡教學</a></p><br><h3 id="更改-Raspberry-Pi-的預設網路連線"><a href="#更改-Raspberry-Pi-的預設網路連線" class="headerlink" title="更改 Raspberry Pi 的預設網路連線"></a>更改 Raspberry Pi 的預設網路連線</h3><p>若想更改預設網路連線，可登入ssh 修改 wpa_supplicant.conf ，新增WiFi之帳號密碼。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure><p><code>Reference:</code> <a href="https://www.raspberrypi.com.tw/2152/setting-up-wifi-with-the-command-line/">基礎-命令列設置無線網路</a></p><br><h3 id="查看-Raspberry-Pi-的-CPU-溫度"><a href="#查看-Raspberry-Pi-的-CPU-溫度" class="headerlink" title="查看 Raspberry Pi 的 CPU 溫度"></a>查看 Raspberry Pi 的 CPU 溫度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ /opt/vc/bin/vcgencmd measure_temp</span><br></pre></td></tr></table></figure><br><h3 id="查看-SD-卡儲存空間"><a href="#查看-SD-卡儲存空間" class="headerlink" title="查看 SD 卡儲存空間"></a>查看 SD 卡儲存空間</h3><p>檔案系統</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ df -h</span><br></pre></td></tr></table></figure><p>各目錄大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ du --max-depth=1-h</span><br></pre></td></tr></table></figure><br><h3 id="啟動後，Line-Notify-發送啟動通知提醒"><a href="#啟動後，Line-Notify-發送啟動通知提醒" class="headerlink" title="啟動後，Line Notify 發送啟動通知提醒"></a>啟動後，Line Notify 發送啟動通知提醒</h3><p>Line Notify 程式碼</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#-*-coding:utf-8-*-</span><br><span class="line"></span><br><span class="line">import lineTool</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">Token = &quot;Your Token&quot;</span><br><span class="line">TurnOn_message = &quot;\n💡 Raspberry Pi 已啟動!\n&quot;</span><br><span class="line">Time_message = time.strftime(&quot;🕒 %Y-%m-%d %H:%M:%S&quot;, time.localtime())</span><br><span class="line">MESSAGE = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.sleep(10)</span><br><span class="line">MESSAGE = TurnOn_message+ Time_message</span><br><span class="line">print(&quot;Send message to Line \n%s\n&quot; % MESSAGE)</span><br><span class="line"></span><br><span class="line">lineTool.lineNotify(Token, MESSAGE)</span><br><span class="line"></span><br><span class="line">input()</span><br></pre></td></tr></table></figure><blockquote><p>SyntaxError: Non-ASCII character ‘\xe4’ in file.</p></blockquote><p>在程式碼開頭加入以下聲明字符格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#-*-coding:utf-8-*-</span><br></pre></td></tr></table></figure><p>存檔後，設定 Corntab 每次 Raspberry Pi 啟動時運行命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>所有＃開頭的都是註解，在文件最後加入以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@reboot python /home/pi/myscript.py</span><br></pre></td></tr></table></figure><p><code>Reference:</code></p><ul><li><p><a href="https://www.slideshare.net/YanweiLiu1/pythonhow-to-install-python-package-on-raspberry-pi">如何幫樹莓派安裝常用的Python套件(How to Install Python Package on Raspberry Pi)</a></p></li><li><p><a href="http://wyj-learning.blogspot.com/2018/07/python-106-python-line-raspberry-pi.html?m=1">一起學 Python 107 : 五分鐘學會使用 Python 傳送 Line 訊息 在 Raspberry pi 開機啟動提醒</a></p></li><li><p><a href="https://www.raspberrypi.org/documentation/linux/usage/cron.md">使用Cron安排任務</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Raspberry Pi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO v1 Real Time Object Detection</title>
    <link href="/2021/07/18/Object%20Detection/Yolo%20v1/"/>
    <url>/2021/07/18/Object%20Detection/Yolo%20v1/</url>
    
    <content type="html"><![CDATA[<p>You Only Look Once: Unified, Real-Time Object Detection</p><h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><h3 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h3><p>Algorithm of The YOLO Detection System 其流程主要分為三個步驟 :</p><ol><li>將影像大小調整至448*448</li><li>執行卷積神經網路進行物件偵測與分類</li><li>透過 NMS (Non-max suppression) 方式框出影像中物件之位置，輸出最終結果</li></ol><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/ObjectDetection.png" alt="img1"></p><h3 id="Object-localization-and-classification"><a href="#Object-localization-and-classification" class="headerlink" title="Object localization and classification"></a>Object localization and classification</h3><p>Object detection 運作步驟 :</p><ol><li>偵測目標位置(產生物件框)</li><li>對目標物件進行分類</li></ol><p>其演算法架構可分為 one-stage, two-stage.</p><ul><li><p>two-stage: 將步驟1, 2分開執行，輸入之影像先藉由物件偵測產生物件框後，再透過 classification 進行分類。performance 通常較好，若偵測出的物件過多，除非有很強的GPU平行運算，否則運算時間將會慢許多。</p><p>  e.g. RCNN</p></li><li><p>one-stage: 輸入之影像透過神經網路同時進行物件偵測與辨識。運算速度較 two-stage 快，但 performance 相對沒有很好，不過後續研究結構的複雜化使其 performance 愈來愈好甚至超越 two-stage。</p><p>  e.g. YOLO</p></li></ul><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/stage.png" alt="img2"></p><h3 id="Comparison-to-Other-Real-Time-Systems"><a href="#Comparison-to-Other-Real-Time-Systems" class="headerlink" title="Comparison to Other Real-Time Systems"></a>Comparison to Other Real-Time Systems</h3><p>YOLO - FPS: 45, mAP: 63.4</p><p>於 Real-Time Detectors 雖然每秒幀數(FPS)表現普通，不過其對所有辨識種類的平均辨識率(mAP)為最高。</p><p>於 Less Than Real-Time 其mAP表現不遜色於其他，且FPS為最高。</p><table><thead><tr><th align="center">Comparison</th><th align="center">Error Analysis</th></tr></thead><tbody><tr><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/comparison.jpg" alt="img3.1"></td><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/ErrorAnalysis.jpg" alt="img3.2"></td></tr></tbody></table><h4 id="IOU"><a href="#IOU" class="headerlink" title="IOU"></a>IOU</h4><p>IOU = 交集a / 聯集a，其值介於0~1之間。</p><p>一般判斷辨識率以IOU &gt;= 0.5 為基準。</p><table><thead><tr><th align="center">bounding box</th><th align="center">IOU</th></tr></thead><tbody><tr><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/bird.png" alt="img4.1"></td><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/IOU.png" alt="img4.2"></td></tr></tbody></table><h4 id="AP、mAP"><a href="#AP、mAP" class="headerlink" title="AP、mAP"></a>AP、mAP</h4><p>precision: 所有被系統預測為鴨子的結果中，真的是鴨子的比例。</p><p>recall: 所有真的鴨子，被系統預測正確的比例。</p><table><thead><tr><th align="center">predict</th><th align="center">result</th></tr></thead><tbody><tr><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/predict.png" alt="img5.1"></td><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/result.png" alt="img5.2"></td></tr><tr><td align="center"><b>precision</b></td><td align="center"><b>recall</b></td></tr><tr><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/precision.png" alt="img5.3"></td><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/recall.png" alt="img5.4"></td></tr></tbody></table><p>AP (average precision): 系統預測該類別時(鴨子)的平均辨識率。</p><p>mAP (mean average precision): 系統對於所有辨識種類(鴨子、貓、狗、人、車…等等)的平均辨識率。</p><br><h2 id="Algorithm-architecture"><a href="#Algorithm-architecture" class="headerlink" title="Algorithm architecture"></a>Algorithm architecture</h2><h3 id="Unified-Detection"><a href="#Unified-Detection" class="headerlink" title="Unified Detection"></a>Unified Detection</h3><h4 id="The-Model"><a href="#The-Model" class="headerlink" title="The Model"></a>The Model</h4><p>YOLO會將影像分成 S*S 格(grid)，每個 grid 有兩個 bounding box 做物件偵測，其一開始偵測到的物件有 7*7*2 = 98個，接著每個 grid 會辨識該物件框所框出之物件所屬的類別，最後採用 NMS 將多餘的 bounding box 濾除。</p><p>若 grid cell 包含<b>被偵測的物件中心</b>，此 grid cell 須負責偵測該物件。</p><p>其最後輸出 tensor 的維度 : S * S * (B * 5 + C)</p><ul><li>S : 網格數量</li><li>B : 每個 grid 預測物件的 bounding box 數 (YOLO v1 set B=2)</li><li>5 : 物件中心 (x, y)、寬高 (w, h)、confidence(是否為物件)</li><li>C : 類別數量(兩個 bounding box 的類別機率)</li></ul><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/detections.png" alt="img6"></p><h4 id="Confidence"><a href="#Confidence" class="headerlink" title="Confidence"></a>Confidence</h4><p>Grid cell 包含目標的機率與IOU相乘。</p><p>Pr(Object) : bounding box 裡可能是物件的 probabilities</p><p>Pr(Class | Object) : 偵測為物件後，該物件所屬類別的 probabilities</p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/confidence.png" alt="img7"></p><h3 id="The-Architecture"><a href="#The-Architecture" class="headerlink" title="The Architecture"></a>The Architecture</h3><p>輸入尺寸調整至448*448，以增加提取解析度。</p><p>神經網路參考GoogleNet，24層 Conv Layers、2層F.C。</p><p>不同的是 YOLO 使用 1*1 卷積(降維)對 3*3 卷積核運算做壓縮，以減少計算參數。取代 GoogleNet 的 Inception modules。</p><p>最後輸出 tensor 為 7 * 7 *(2 * 5 + 20) = 7 * 7 * 30</p><p>C = 20，使用 PASCAL VOC 資料集，有20種類別。</p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/model1.png" alt="img8.1"></p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/model2.png" alt="img8.2"></p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/yolov1_output.png" alt="img8.3"></p><p>Bounding box 四個位置值為正規化數值 :</p><p>(x, y, w, h) = bbox(x, y, w, h) / 原影像(x, y, w, h)</p><h4 id="Activation-function"><a href="#Activation-function" class="headerlink" title="Activation function"></a>Activation function</h4><p>Activation function 採用 leaky rectified linear activation (leaky ReLU):</p><p>ReLU 會使部分神經元輸出為0，以解決 Overfitting，但有些神經元可能無法被激活(Dead ReLU Problem)，因此採用 Leaky ReLU 不增加計算複雜度，提升模型的學習能力。</p><p>ReLU 是將所有負值皆設為零；Leaky ReLU 則是將負值乘上非零斜率。</p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/leakyrelu.png" alt="img9"></p><p>除了輸出層使用 linear activation，其他皆使用 leaky ReLU。</p><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><p>前20層 Conv Layers 是以大型 dataset(ImageNet) 進行 pretrain(特徵提取)，因此不修正此處權重。</p><p>Pretrain 完成後，再接上隨機權重的4層 Conv Layers(分類器)、2層 F.C。</p><table><thead><tr><th align="center">Inference</th></tr></thead><tbody><tr><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/inference.jpg" alt="img10.1"></td></tr><tr><td align="center">Detection Procedure</td></tr><tr><td align="center"><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/yolov1_detect.png" alt="img10.2"></td></tr></tbody></table><p>最後輸出層進行 detection procedure 時，以Grid 包含兩個 bbox 的 confidence 乘上 Pr(Class)，形成評估 bbox 的指數。</p><h4 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h4><p>採用平方誤差和 (sum-squared error) 做 loss function。</p><p>誤差有分類誤差(class error)、邊界框定位誤差(localization error)。</p><p>沒有物件的邊界框其 confidence 很低，會將最後指標推向幾乎等於0，導致誤差梯度過大，使整個損失函數被沒有物件的邊界框主導，造成損失不穩定且難以訓練好。</p><p>因此誤差除了分類與邊界框定位外，還將有無包含物件的邊界框分開計算，且給予不同權重。</p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/lossfunction.png" alt="img11.2"></p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/lossfunction2.png" alt="img11.2"></p><p>w、h 取平方根 : bbox 的大小對 bias 的影響比例不同，因此取平方根以降低 bias。</p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/bbox-bias.jpg" alt="img11.3"></p><h3 id="NMS-Non-max-suppression"><a href="#NMS-Non-max-suppression" class="headerlink" title="NMS (Non-max suppression)"></a>NMS (Non-max suppression)</h3><p>物件偵測時一個物件可能被很多物件框選中，因此採用 NMS 將多餘的物件框濾除。</p><ol><li>將 confidence 很低的 bbox 去除，並選出 confidence 最高的 bbox 加入”確定是物件集合” (selected objects)</li><li>其他 bbox 與選出的 bbox 計算IOU，若 bbox 的IOU結果大於設定好之閾值，其 confidence 會設定為0</li></ol><p>Repeat 1、2 步驟直到沒有 bbox 的 confidence &gt; 0，selected objects 為最後結果，NMS結束。</p><p><img src="https://raw.githubusercontent.com/prjiang/AI-Seminar/main/2021-07-12/report/img/NMS.png" alt="img12"></p><br><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>YOLO v1 的速度較 two-stage 模型快上好幾倍(45 fps)，且 mAP(63.4) 也比 R-CNN 好很多。</p><p>但其也有不少缺點 :</p><ol><li>每個格子只預測兩個框，且一個框只有一個分類，因此對於群體的小物件偵測能力不佳 (e.g. 一群鳥)。</li><li>由訓練資料學習辨識與邊界框，對於新的、長寬比不常見之物件難以偵測。其他演算法 e.g. SSD (sol: data augmentation)。</li><li>經過多個降維，在特徵解析度粗糙的 feature map 上預測邊界框，其泛化能力差(對新數據的適應能力)。</li><li>於loss function上，邊界框定位誤差為影響預測效果的主因，bounding box 的大小在 loss 的反應上不佳，小的 bbox 對 IOU 影響較大。</li></ol><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://arxiv.org/pdf/1506.02640.pdf">You Only Look Once: Unified, Real-Time Object Detection</a></li><li><a href="https://chih-sheng-huang821.medium.com/%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92-%E7%89%A9%E4%BB%B6%E5%81%B5%E6%B8%AC%E4%B8%8A%E7%9A%84%E6%A8%A1%E5%9E%8B%E7%B5%90%E6%A7%8B%E8%AE%8A%E5%8C%96-e23fd928ee59">深度學習: 物件偵測上的模型結構變化</a></li><li><a href="http://yy-programer.blogspot.com/2020/06/iouapmap.html">影像辨識常見的IOU、AP、mAP是什麼意思?</a></li><li><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E5%B7%A5%E4%BD%9C%E7%B4%A1/yolo-v1-%E7%89%A9%E4%BB%B6%E5%81%B5%E6%B8%AC-%E8%AB%96%E6%96%87%E6%95%B4%E7%90%86-935bfd51d5e0">YOLO v1 物件偵測~論文整理</a></li><li><a href="https://blog.csdn.net/c20081052/article/details/80236015">深度學習YOLO V1 深刻解讀YOLO V1(圖解)</a></li><li><a href="https://yuweichiu.github.io/%E4%BA%BA%E5%AD%B8%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/p0005-Object-Detection-S4-YOLO-v1/">物件偵測 S4: YOLO v1 簡介</a></li><li><a href="https://www.itread01.com/content/1546354994.html">常用啟用函式</a></li><li><a href="https://chih-sheng-huang821.medium.com/%E6%A9%9F%E5%99%A8-%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92-%E7%89%A9%E4%BB%B6%E5%81%B5%E6%B8%AC-non-maximum-suppression-nms-aa70c45adffa">機器/深度學習: 物件偵測 Non-Maximum Suppression (NMS)</a></li><li><a href="https://www.youtube.com/watch?v=sq_OfIhb5Oc">圖解一階段物件偵測算法_Part01 - YOLOv1</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Object Detection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO v1</tag>
      
      <tag>Object detection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Git Commands</title>
    <link href="/2021/07/17/Note/Basic%20Git%20Commands/"/>
    <url>/2021/07/17/Note/Basic%20Git%20Commands/</url>
    
    <content type="html"><![CDATA[<h2 id="Set-up-Git-config-path"><a href="#Set-up-Git-config-path" class="headerlink" title="Set up Git config path"></a>Set up Git config path</h2><p>首先設定好自己的名字與信箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;Your email&quot;</span></span><br></pre></td></tr></table></figure><p>確認輸入是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure><p>查看 git config 設定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><br><h2 id="Importing-project"><a href="#Importing-project" class="headerlink" title="Importing project"></a>Importing project</h2><h3 id="Creat-a-project-file"><a href="#Creat-a-project-file" class="headerlink" title="Creat a project file"></a>Creat a project file</h3><p>建立專案資料夾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir project</span><br></pre></td></tr></table></figure><p>移動至 project 資料夾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> project</span><br></pre></td></tr></table></figure><h3 id="Creat-a-repository"><a href="#Creat-a-repository" class="headerlink" title="Creat a repository"></a>Creat a repository</h3><p>建立本地端初始化 git repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="Clone-GitHub-repository"><a href="#Clone-GitHub-repository" class="headerlink" title="Clone GitHub repository"></a>Clone GitHub repository</h3><p>從 GitHub 下載數據庫 <code>remote repo</code> 至目前工作區</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> SSH/HTTPS</span><br></pre></td></tr></table></figure><h3 id="Listing-the-contents-of-file-information"><a href="#Listing-the-contents-of-file-information" class="headerlink" title="Listing the contents of file information"></a>Listing the contents of file information</h3><p>列出 project file 的檔案和資料夾 <code>-l: 列出詳細資料</code> <code>-a: 列出隱藏資料夾</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la</span><br></pre></td></tr></table></figure><h2 id="Git-add-staging-area"><a href="#Git-add-staging-area" class="headerlink" title="Git add staging area"></a>Git add staging area</h2><p>檢查目前本地端所有檔案的狀態</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>將更新檔案建立索引 <code>版本控制</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .                 // project下的所有檔案</span><br><span class="line">$ git add helloworld.txt    // 指定project下的單一檔案</span><br></pre></td></tr></table></figure><h2 id="Git-commit-to-local-repository"><a href="#Git-commit-to-local-repository" class="headerlink" title="Git commit to local repository"></a>Git commit to local repository</h2><p>將建立索引的更新檔案 commit 到 local repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;summary&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Git-push-to-GitHub"><a href="#Git-push-to-GitHub" class="headerlink" title="Git push to GitHub"></a>Git push to GitHub</h2><p>加入遠端數據庫 <code>git remote</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin url</span><br></pre></td></tr></table></figure><p>將 local repo commit 發佈到 GitHub <code>git push</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin branch</span><br></pre></td></tr></table></figure><br><h2 id="View-project-history"><a href="#View-project-history" class="headerlink" title="View project history"></a>View project history</h2><p>查看之前的 commit 記錄 <code>版本資訊</code></p><p>q 退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span>       // 作者、時間、commit 內容</span><br><span class="line">$ git reflog    // commit 內容</span><br></pre></td></tr></table></figure><p>查看目前檔案與上次 commit 的差異</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff commitID</span><br></pre></td></tr></table></figure><br><h2 id="Set-up-SSH-key-on-your-machine"><a href="#Set-up-SSH-key-on-your-machine" class="headerlink" title="Set up SSH key on your machine"></a>Set up SSH key on your machine</h2><p>在 terminal 執行 SSH 時發生如下錯誤 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Permissiondenied (publickey).</span><br><span class="line">fatal:Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Pleasemake sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><h3 id="Creat-SSH-key"><a href="#Creat-SSH-key" class="headerlink" title="Creat SSH key"></a>Creat SSH key</h3><p>過程一直按 enter 即可，最後便會生成你的 ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;Your email&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Set-up-SSH-key"><a href="#Set-up-SSH-key" class="headerlink" title="Set up SSH key"></a>Set up SSH key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -v git@github.com</span><br><span class="line">$ ssh-agent -s</span><br><span class="line">$ <span class="built_in">eval</span> `ssh-agent -s`</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>將產生的 id_rsa.pub 複製至 <code>github setting -&gt; SSH and GPG keys -&gt; new SSH key</code></p><h3 id="Authenticate-SSH-key"><a href="#Authenticate-SSH-key" class="headerlink" title="Authenticate SSH key"></a>Authenticate SSH key</h3><p>在 GitHub 上設定完成後，在 terminal 驗證 ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>驗證成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
